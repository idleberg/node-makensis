name: "Run tests on Bun"

on:
  push:
    paths:
      - ".github/**"
      - "src/**"
      - "tests/**"
      - "types/**"
      - "biome.jsonc"
      - "package.json"
      - "pnpm-lock.yaml"
  pull_request:
    paths:
      - ".github/**"
      - "src/**"
      - "tests/**"
      - "types/**"
      - "biome.jsonc"
      - "package.json"
      - "pnpm-lock.yaml"
  workflow_dispatch:

jobs:
  default:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "ubuntu-latest", "windows-latest"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: "Install NSIS (macOS)"
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install nsis

      - name: "Install NSIS (Ubuntu)"
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install nsis

      - name: "Install NSIS (Windows)"
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop bucket add nsis https://github.com/NSIS-Dev/scoop-nsis
          scoop install nsis/nsis

      - name: "Print NSIS version"
        run: makensis -VERSION

      - name: "Print NSIS header info"
        run: makensis -HDRINFO

      - uses: oven-sh/setup-bun@v2

      - uses: actions/cache@v4
        name: Set up Bun cache
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: "Install dependencies"
        run: bun install --frozen-lockfile --strict-peer-dependencies

      - name: "Lint Source"
        if: matrix.os != 'windows-latest'
        run: bun exec biome ci

      - name: "Build Source"
        run: bun run --if-present build

      - name: "Run Tests"
        run: bun run --if-present test
